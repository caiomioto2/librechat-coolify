#!/bin/bash

# Git Repository Setup Script for LibreChat + GoMarble MCP Coolify Deployment
# This script prepares the repository for Coolify deployment

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

success() {
    echo -e "${GREEN}[SUCCESS] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

# Check if git is available
check_git() {
    if ! command -v git &> /dev/null; then
        error "Git is not installed. Please install git first."
        exit 1
    fi
    success "Git is available"
}

# Initialize git repository if not already initialized
init_git_repo() {
    if [ ! -d ".git" ]; then
        log "Initializing git repository..."
        git init
        success "Git repository initialized"
    else
        success "Git repository already exists"
    fi
}

# Create .gitignore file for the project
create_gitignore() {
    log "Creating .gitignore file..."
    
    cat > .gitignore << 'EOF'
# Environment files with sensitive data
.env
.env.local
.env.production
.env.development

# Node modules
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# Docker volumes and data
data-node/
data-node-backup/
meili_data_v1.12/
meili_data_backup/
logs_backup/
uploads/

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Temporary files
*.tmp
*.temp

# Build outputs
dist/
build/
out/

# Docker specific
.dockerignore

# Coolify specific
coolify-deployment.log

# Backup files
*.bak
*.backup

# Local development overrides
docker-compose.override.yml
librechat.local.yaml
EOF

    success ".gitignore file created"
}

# Add all Coolify deployment files to git
add_deployment_files() {
    log "Adding Coolify deployment files to git..."
    
    # Essential deployment files
    git add Dockerfile.coolify
    git add coolify-docker-compose.yml
    git add coolify-environment-template.env
    git add deploy.sh
    git add healthcheck.sh
    git add COOLIFY_DEPLOYMENT_GUIDE.md
    git add README-COOLIFY.md
    
    # Core LibreChat files
    git add librechat.yaml
    git add server/
    git add package.json
    
    # Documentation
    if [ -f "README.md" ]; then
        git add README.md
    fi
    
    success "Deployment files added to git"
}

# Create initial commit
create_initial_commit() {
    log "Creating initial commit..."
    
    # Check if there are any changes to commit
    if git diff --staged --quiet; then
        warning "No changes to commit"
        return
    fi
    
    git commit -m "feat: Initial LibreChat + GoMarble MCP Coolify deployment setup

- Add custom Dockerfile for Coolify deployment
- Add production-ready docker-compose configuration  
- Include GoMarble MCP server integration
- Add automated deployment and health check scripts
- Include comprehensive documentation and templates
- Configure security hardening for production use

Ready for Coolify deployment with:
✅ Multi-service architecture (LibreChat, MongoDB, MeiliSearch, RAG API, VectorDB)
✅ GoMarble MCP integration for marketing data access
✅ Production security configurations
✅ Persistent data storage
✅ Health monitoring and automated deployment
✅ Complete documentation and setup guides"
    
    success "Initial commit created"
}

# Display next steps
display_next_steps() {
    log "=== Repository Setup Complete ==="
    echo
    success "Your LibreChat + GoMarble MCP repository is ready for Coolify deployment!"
    echo
    echo "🚀 Next Steps:"
    echo
    echo "1. 📚 Review the deployment guide:"
    echo "   cat COOLIFY_DEPLOYMENT_GUIDE.md"
    echo
    echo "2. 🔑 Configure your environment variables:"
    echo "   cp coolify-environment-template.env .env"
    echo "   # Edit .env with your actual API keys and secrets"
    echo
    echo "3. 🌐 Push to your Git provider:"
    echo "   git remote add origin https://github.com/yourusername/librechat-coolify.git"
    echo "   git branch -M main"
    echo "   git push -u origin main"
    echo
    echo "4. 🏗️ Deploy via Coolify:"
    echo "   - Import repository in Coolify dashboard"
    echo "   - Set environment variables from your .env file"
    echo "   - Deploy using coolify-docker-compose.yml"
    echo
    echo "5. ✅ Verify deployment:"
    echo "   ./healthcheck.sh"
    echo
    echo "📋 Required Environment Variables:"
    echo "   - GOMARBLE_API_KEY (from GoMarble dashboard)"
    echo "   - JWT_SECRET & JWT_REFRESH_SECRET (generate secure random strings)"
    echo "   - CREDS_KEY & CREDS_IV (generate encryption keys)"
    echo "   - MEILI_MASTER_KEY & POSTGRES_PASSWORD (database passwords)"
    echo "   - DOMAIN_CLIENT & DOMAIN_SERVER (your deployment domain)"
    echo
    echo "🔐 Generate secure keys with:"
    echo "   openssl rand -hex 32  # For JWT secrets"
    echo "   openssl rand -hex 16  # For CREDS_KEY"
    echo "   openssl rand -hex 8   # For CREDS_IV"
    echo "   openssl rand -base64 32  # For MEILI_MASTER_KEY"
    echo
    echo "🎯 GoMarble Features (once deployed):"
    echo "   - Facebook Ads performance data and insights"
    echo "   - Google Ads campaigns and keyword metrics"
    echo "   - Google Analytics traffic and conversion data"
    echo "   - Cross-platform marketing analytics"
    echo
    success "Happy deploying! 🎉"
}

# Main function
main() {
    log "Setting up LibreChat + GoMarble MCP repository for Coolify deployment..."
    echo
    
    # Setup steps
    check_git
    init_git_repo
    create_gitignore
    add_deployment_files
    create_initial_commit
    
    # Display completion message
    display_next_steps
}

# Handle script arguments
case "${1:-}" in
    "clean")
        log "Cleaning git repository (removes all git history)..."
        rm -rf .git
        success "Git repository cleaned"
        ;;
    "status")
        log "Git repository status:"
        git status
        ;;
    *)
        main
        ;;
esac